import {
  Signer,
  defineReadOnly,
  getDefaultProvider,
  init_lib13 as init_lib2,
  init_lib20 as init_lib3,
  init_lib4 as init_lib
} from "./chunk-AVG4MCCG.js";
import {
  init_shim
} from "./chunk-ZGMFR26H.js";

// node_modules/@paperxyz/embedded-wallet-service-sdk/dist/index.mjs
init_shim();

// node_modules/@paperxyz/sdk-common-utilities/dist/index.mjs
init_shim();
var t = { Ethereum: "https://rpc.ankr.com/eth", Goerli: "https://goerli.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161", Mumbai: "https://rpc-mumbai.maticvigil.com", Polygon: "https://rpc-mainnet.maticvigil.com", Avalanche: "https://api.avax.network/ext/bc/C/rpc" };
var e = () => typeof window != "undefined" && window.localStorage.getItem("IS_PAPER_DEV") === "true";
var r = () => typeof window != "undefined" && window.location.origin.includes("paper.xyz");
var i = () => {
  var o;
  return e() ? (o = window.localStorage.getItem("PAPER_DEV_URL")) != null ? o : "http://localhost:3000" : r() ? window.location.origin : "https://withpaper.com";
};

// node_modules/@paperxyz/embedded-wallet-service-sdk/dist/index.mjs
init_lib3();
init_lib2();
init_lib();
var G = Object.defineProperty;
var x = Object.defineProperties;
var M = Object.getOwnPropertyDescriptors;
var R = Object.getOwnPropertySymbols;
var k = Object.prototype.hasOwnProperty;
var Q = Object.prototype.propertyIsEnumerable;
var O = (a, e2, t2) => e2 in a ? G(a, e2, { enumerable: true, configurable: true, writable: true, value: t2 }) : a[e2] = t2;
var u = (a, e2) => {
  for (var t2 in e2 || (e2 = {}))
    k.call(e2, t2) && O(a, t2, e2[t2]);
  if (R)
    for (var t2 of R(e2))
      Q.call(e2, t2) && O(a, t2, e2[t2]);
  return a;
};
var I = (a, e2) => x(a, M(e2));
var i2 = (a, e2, t2) => new Promise((r2, s) => {
  var o = (l) => {
    try {
      p(t2.next(l));
    } catch (d) {
      s(d);
    }
  }, n = (l) => {
    try {
      p(t2.throw(l));
    } catch (d) {
      s(d);
    }
  }, p = (l) => l.done ? r2(l.value) : Promise.resolve(l.value).then(o, n);
  p((t2 = t2.apply(a, e2)).next());
});
var g = "/sdk/2022-08-12/embedded-wallet";
var T = (a) => `paperEwsWalletUserId-${a}`;
var F = "walletToken";
var E = (a) => `${F}-${a}`;
var U = "a";
var A = (a, e2) => `${U}-${a}-${e2}`;
var X = (a) => `${U}-${a}`;
var H = ((s) => (s.PAPER_EMAIL_OTP = "PaperEmailOTP", s.GOOGLE = "Google", s.AUTH0 = "Auth0", s.CUSTOM_JWT = "CustomJWT", s))(H || {});
var b = ((t2) => (t2.LOGGED_OUT = "Logged Out", t2.LOGGED_IN_WALLET_INITIALIZED = "Logged In, Wallet Initialized", t2))(b || {});
var C = ((s) => (s.LOGGED_OUT = "Logged Out", s.LOGGED_IN_WALLET_UNINITIALIZED = "Logged In, Wallet Uninitialized", s.LOGGED_IN_NEW_DEVICE = "Logged In, New Device", s.LOGGED_IN_WALLET_INITIALIZED = "Logged In, Wallet Initialized", s))(C || {});
var N = /* @__PURE__ */ new Map();
var c = class {
  constructor({ clientId: e2 }) {
    this.isSupported = typeof window != "undefined" && !!window.localStorage, this.clientId = e2;
  }
  getItem(e2) {
    return i2(this, null, function* () {
      var t2;
      return this.isSupported ? window.localStorage.getItem(e2) : (t2 = N.get(e2)) != null ? t2 : null;
    });
  }
  setItem(e2, t2) {
    return i2(this, null, function* () {
      if (this.isSupported)
        return window.localStorage.setItem(e2, t2);
      N.set(e2, t2);
    });
  }
  removeItem(e2) {
    return i2(this, null, function* () {
      let t2 = yield this.getItem(e2);
      return this.isSupported && t2 ? (window.localStorage.removeItem(e2), true) : false;
    });
  }
  saveAuthCookie(e2) {
    return i2(this, null, function* () {
      yield this.setItem(E(this.clientId), e2);
    });
  }
  getAuthCookie() {
    return i2(this, null, function* () {
      return this.getItem(E(this.clientId));
    });
  }
  removeAuthCookie() {
    return i2(this, null, function* () {
      return this.removeItem(E(this.clientId));
    });
  }
  saveDeviceShare(e2, t2) {
    return i2(this, null, function* () {
      yield this.saveWalletUserId(t2), yield this.setItem(A(this.clientId, t2), e2);
    });
  }
  getDeviceShare() {
    return i2(this, null, function* () {
      let e2 = yield this.getWalletUserId();
      return e2 ? this.getItem(A(this.clientId, e2)) : null;
    });
  }
  removeDeviceShare() {
    return i2(this, null, function* () {
      let e2 = yield this.getWalletUserId();
      return e2 ? this.removeItem(A(this.clientId, e2)) : false;
    });
  }
  getWalletUserId() {
    return i2(this, null, function* () {
      return this.getItem(T(this.clientId));
    });
  }
  saveWalletUserId(e2) {
    return i2(this, null, function* () {
      yield this.setItem(T(this.clientId), e2);
    });
  }
  removeWalletUserId() {
    return i2(this, null, function* () {
      return this.removeItem(T(this.clientId));
    });
  }
};
function L(a) {
  return new Promise((e2) => {
    setTimeout(e2, a * 1e3);
  });
}
var z = { height: "100%", width: "100%", border: "none", backgroundColor: "transparent", position: "fixed", top: "0px", right: "0px", zIndex: "2147483646", display: "none" };
var w = /* @__PURE__ */ new Map();
var f = class {
  constructor({ link: e2, iframeId: t2, container: r2 = document.body, iframeStyles: s, onIframeInitialize: o }) {
    this.POLLING_INTERVAL_SECONDS = 1.4;
    this.POST_LOAD_BUFFER_SECONDS = 1;
    let n = document.getElementById(t2), p = new URL(e2), l = "0.0.26";
    if (!l)
      throw new Error("Missing SDK_VERSION env var");
    if (p.searchParams.set("sdkVersion", l), !n || n.src != p.href) {
      if (!n) {
        n = document.createElement("iframe");
        let d = u(u({}, z), s);
        Object.assign(n.style, d), n.setAttribute("id", t2), r2.appendChild(n);
      }
      n.src = p.href, n.setAttribute("data-version", l), n.onload = this.onIframeLoadHandler(n, this.POST_LOAD_BUFFER_SECONDS, o);
    }
    this.iframe = n;
  }
  onIframeLoadedInitVariables() {
    return i2(this, null, function* () {
      return {};
    });
  }
  onIframeLoadHandler(e2, t2, r2) {
    return () => i2(this, null, function* () {
      yield new Promise((o, n) => i2(this, null, function* () {
        var d;
        let p = new MessageChannel();
        p.port1.onmessage = (S) => {
          let { data: m } = S;
          return p.port1.close(), m.success ? (w.set(e2.src, true), r2 && r2(), o(true)) : n(m.error);
        }, yield L(t2);
        let l = "initIframe";
        (d = e2 == null ? void 0 : e2.contentWindow) == null || d.postMessage({ eventType: l, data: yield this.onIframeLoadedInitVariables() }, `${i()}${g}`, [p.port2]);
      }));
    });
  }
  call(s) {
    return i2(this, arguments, function* ({ procedureName: e2, params: t2, showIframe: r2 = false }) {
      for (; !w.get(this.iframe.src); )
        yield L(this.POLLING_INTERVAL_SECONDS);
      return r2 && (this.iframe.style.display = "block", yield L(5e-3)), new Promise((n, p) => {
        var d;
        let l = new MessageChannel();
        l.port1.onmessage = (S) => i2(this, null, function* () {
          let { data: m } = S;
          l.port1.close(), r2 && (yield L(0.1), this.iframe.style.display = "none"), m.success ? n(m.data) : p(m.error);
        }), (d = this.iframe.contentWindow) == null || d.postMessage({ eventType: e2, data: t2 }, `${i()}${g}`, [l.port2]);
      });
    });
  }
  destroy() {
    w.delete(this.iframe.src);
  }
};
var W = class extends f {
  constructor({ clientId: t2, customizationOptions: r2 }) {
    super({ iframeId: j, link: q({ clientId: t2, path: g, queryParams: r2 }).href, container: document.body });
    this.clientId = t2;
  }
  onIframeLoadedInitVariables() {
    return i2(this, null, function* () {
      let t2 = new c({ clientId: this.clientId });
      return { authCookie: yield t2.getAuthCookie(), deviceShareStored: yield t2.getDeviceShare(), walletUserId: yield t2.getWalletUserId(), clientId: this.clientId };
    });
  }
};
function q({ clientId: a, path: e2, queryParams: t2 }) {
  var s;
  let r2 = new URL(e2, i());
  if (r2.searchParams.set("clientId", a), t2)
    for (let o of Object.keys(t2))
      r2.searchParams.set(o, ((s = t2[o]) == null ? void 0 : s.toString()) || "");
  return r2;
}
var j = "paper-embedded-wallet-iframe";
var _ = class {
  constructor({ clientId: e2, querier: t2, onAuthSuccess: r2 }) {
    this.clientId = e2, this.AuthQuerier = t2, this.localStorage = new c({ clientId: e2 }), this.onAuthSuccess = r2;
  }
  postLogin(r2) {
    return i2(this, arguments, function* ({ storedToken: e2, walletDetails: t2 }) {
      return e2.shouldStoreCookieString && (yield this.localStorage.saveAuthCookie(e2.cookieString)), yield this.onAuthSuccess({ storedToken: e2, walletDetails: t2 });
    });
  }
  loginWithJwtAuth(s) {
    return i2(this, arguments, function* ({ token: e2, authProvider: t2, recoveryCode: r2 }) {
      let o = yield this.AuthQuerier.call({ procedureName: "loginWithJwtAuthCallback", params: { token: e2, authProvider: t2, recoveryCode: r2 } });
      return this.postLogin(o);
    });
  }
  loginWithPaperModal() {
    return i2(this, null, function* () {
      let e2 = yield this.AuthQuerier.call({ procedureName: "loginWithPaperModal", params: void 0, showIframe: true });
      return this.postLogin(e2);
    });
  }
  loginWithPaperEmailOtp(t2) {
    return i2(this, arguments, function* ({ email: e2 }) {
      let r2 = yield this.AuthQuerier.call({ procedureName: "loginWithPaperModal", params: { email: e2 }, showIframe: true });
      return this.postLogin(r2);
    });
  }
  sendPaperEmailLoginOtp(t2) {
    return i2(this, arguments, function* ({ email: e2 }) {
      let { isNewUser: r2, isNewDevice: s } = yield this.AuthQuerier.call({ procedureName: "sendPaperEmailLoginOtp", params: { email: e2 } });
      return { isNewUser: r2, isNewDevice: s };
    });
  }
  verifyPaperEmailLoginOtp(s) {
    return i2(this, arguments, function* ({ email: e2, otp: t2, recoveryCode: r2 }) {
      let o = yield this.AuthQuerier.call({ procedureName: "verifyPaperEmailLoginOtp", params: { email: e2, otp: t2, recoveryCode: r2 } });
      return this.postLogin(o);
    });
  }
  logout() {
    return i2(this, null, function* () {
      let { success: e2 } = yield this.AuthQuerier.call({ procedureName: "logout", params: void 0 }), t2 = yield this.localStorage.removeAuthCookie(), r2 = yield this.localStorage.removeWalletUserId();
      return { success: e2 || t2 || r2 };
    });
  }
};
var y = class {
  constructor({ chain: e2, clientId: t2, querier: r2 }) {
    this.chain = e2, this.clientId = t2, this.gaslessTransactionQuerier = r2;
  }
  callContract(s) {
    return i2(this, arguments, function* ({ contractAddress: e2, methodArgs: t2, methodInterface: r2 }) {
      return yield this.gaslessTransactionQuerier.call({ procedureName: "callContract", params: { chain: this.chain, contractAddress: e2, method: { args: t2, stub: r2 } } });
    });
  }
};
var h = class extends Signer {
  constructor({ provider: t2, clientId: r2, querier: s }) {
    super();
    this.DEFAULT_ETHEREUM_CHAIN_ID = 1;
    this.clientId = r2, this.querier = s, defineReadOnly(this, "provider", t2);
  }
  getAddress() {
    return i2(this, null, function* () {
      let { address: t2 } = yield this.querier.call({ procedureName: "getAddress", params: void 0 });
      return t2;
    });
  }
  signMessage(t2) {
    return i2(this, null, function* () {
      var s, o, n;
      let { signedMessage: r2 } = yield this.querier.call({ procedureName: "signMessage", params: { message: t2, chainId: (n = (o = yield (s = this.provider) == null ? void 0 : s.getNetwork()) == null ? void 0 : o.chainId) != null ? n : this.DEFAULT_ETHEREUM_CHAIN_ID } });
      return r2;
    });
  }
  signTransaction(t2) {
    return i2(this, null, function* () {
      var s, o, n;
      let { signedTransaction: r2 } = yield this.querier.call({ procedureName: "signTransaction", params: { transaction: t2, chainId: (n = (o = yield (s = this.provider) == null ? void 0 : s.getNetwork()) == null ? void 0 : o.chainId) != null ? n : this.DEFAULT_ETHEREUM_CHAIN_ID } });
      return r2;
    });
  }
  _signTypedData(t2, r2, s) {
    return i2(this, null, function* () {
      var n, p, l;
      let { signedTypedData: o } = yield this.querier.call({ procedureName: "signTypedDataV4", params: { domain: t2, types: r2, message: s, chainId: (l = (p = yield (n = this.provider) == null ? void 0 : n.getNetwork()) == null ? void 0 : p.chainId) != null ? l : this.DEFAULT_ETHEREUM_CHAIN_ID } });
      return o;
    });
  }
  connect(t2) {
    return new h({ clientId: this.clientId, provider: t2, querier: this.querier });
  }
};
var D = class {
  constructor({ clientId: e2, chain: t2, querier: r2 }) {
    this.clientId = e2, this.chain = t2, this.walletManagerQuerier = r2, this.gasless = new y({ chain: t2, clientId: e2, querier: r2 }), this.localStorage = new c({ clientId: e2 });
  }
  postWalletSetUp(o) {
    return i2(this, arguments, function* ({ deviceShareStored: e2, walletAddress: t2, isIframeStorageEnabled: r2, walletUserId: s }) {
      return r2 || (yield this.localStorage.saveDeviceShare(e2, s)), { walletAddress: t2 };
    });
  }
  getUserWalletStatus() {
    return i2(this, null, function* () {
      let e2 = yield this.walletManagerQuerier.call({ procedureName: "getUserStatus", params: void 0 });
      return e2.status === "Logged In, Wallet Initialized" ? { status: "Logged In, Wallet Initialized", user: I(u({}, e2.user), { wallet: this }) } : e2;
    });
  }
  setChain(t2) {
    return i2(this, arguments, function* ({ chain: e2 }) {
      this.chain = e2, this.gasless = new y({ chain: e2, clientId: this.clientId, querier: this.walletManagerQuerier });
    });
  }
  getEthersJsSigner(e2) {
    return i2(this, null, function* () {
      var r2;
      return new h({ clientId: this.clientId, provider: getDefaultProvider((r2 = e2 == null ? void 0 : e2.rpcEndpoint) != null ? r2 : t[this.chain]), querier: this.walletManagerQuerier });
    });
  }
};
var P = class {
  constructor({ clientId: e2, chain: t2, styles: r2 }) {
    this.clientId = e2, this.querier = new W({ clientId: e2, customizationOptions: r2 }), this.wallet = new D({ clientId: e2, chain: t2, querier: this.querier }), this.auth = new _({ clientId: e2, querier: this.querier, onAuthSuccess: (s) => i2(this, null, function* () {
      return yield this.wallet.postWalletSetUp(I(u({}, s.walletDetails), { walletUserId: s.storedToken.authDetails.userWalletId })), { user: { status: "Logged In, Wallet Initialized", authDetails: s.storedToken.authDetails, wallet: this.wallet, walletAddress: s.walletDetails.walletAddress } };
    }) });
  }
  getUser() {
    return i2(this, null, function* () {
      let e2 = yield this.wallet.getUserWalletStatus();
      switch (e2.status) {
        case "Logged In, New Device":
        case "Logged In, Wallet Uninitialized":
          return yield this.auth.logout(), this.getUser();
        case "Logged Out":
          return { status: "Logged Out" };
        case "Logged In, Wallet Initialized":
          return u({ status: "Logged In, Wallet Initialized" }, e2.user);
      }
    });
  }
};

export {
  g,
  T,
  E,
  A,
  X,
  H,
  b,
  C,
  P
};
//# sourceMappingURL=chunk-S4XJRROV.js.map
