import {
  AddressOrEnsSchema,
  AmountSchema,
  BigNumberSchema,
  BigNumberTransformSchema,
  BigNumberishSchema,
  CommonNFTInput,
  CommonNFTOutput,
  GENERATED_ABI,
  NFTInputOrUriSchema,
  require_bs58,
  require_dist,
  require_fast_deep_equal,
  z
} from "./chunk-VNEEXV7V.js";
import {
  require_utils
} from "./chunk-ZMTNID62.js";
import {
  init_lib7 as init_lib
} from "./chunk-W2YF4XCL.js";
import {
  require_browser_ponyfill
} from "./chunk-KSBPR6CT.js";
import {
  require_bn
} from "./chunk-2O4376VB.js";
import {
  init_shim
} from "./chunk-ZGMFR26H.js";
import {
  __toESM
} from "./chunk-IKJM6GHQ.js";

// node_modules/@thirdweb-dev/sdk/dist/thirdweb-dev-sdk.browser.esm.js
init_shim();

// node_modules/@thirdweb-dev/sdk/dist/abi-d15c2925.browser.esm.js
init_shim();
var PropertiesInput = z.object({}).catchall(z.union([BigNumberTransformSchema, z.unknown()]));
var OptionalPropertiesInput = z.union([z.array(PropertiesInput), PropertiesInput]).optional();
var EditionMetadataOutputSchema = z.object({
  supply: BigNumberSchema,
  metadata: CommonNFTOutput
});
var EditionMetadataWithOwnerOutputSchema = EditionMetadataOutputSchema.extend({
  owner: z.string(),
  quantityOwned: BigNumberSchema
});
var EditionMetadataInputSchema = z.object({
  supply: BigNumberishSchema,
  metadata: CommonNFTInput
});
var EditionMetadataInputOrUriSchema = z.object({
  supply: BigNumberishSchema,
  metadata: NFTInputOrUriSchema
});
var TokenMintInputSchema = z.object({
  toAddress: AddressOrEnsSchema,
  amount: AmountSchema
});
var ProposalState = function(ProposalState2) {
  ProposalState2[ProposalState2["Pending"] = 0] = "Pending";
  ProposalState2[ProposalState2["Active"] = 1] = "Active";
  ProposalState2[ProposalState2["Canceled"] = 2] = "Canceled";
  ProposalState2[ProposalState2["Defeated"] = 3] = "Defeated";
  ProposalState2[ProposalState2["Succeeded"] = 4] = "Succeeded";
  ProposalState2[ProposalState2["Queued"] = 5] = "Queued";
  ProposalState2[ProposalState2["Expired"] = 6] = "Expired";
  ProposalState2[ProposalState2["Executed"] = 7] = "Executed";
  return ProposalState2;
}({});
function getCachedAbiForContract(address) {
  if (address in GENERATED_ABI) {
    return GENERATED_ABI[address];
  }
  return void 0;
}

// node_modules/@thirdweb-dev/sdk/dist/thirdweb-dev-sdk.browser.esm.js
var import_bn = __toESM(require_bn());
init_lib();
var import_bs58 = __toESM(require_bs58());
var import_utils = __toESM(require_utils());
var import_cross_fetch = __toESM(require_browser_ponyfill());
var import_utils2 = __toESM(require_utils());
var import_merkletreejs = __toESM(require_dist());
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
globalThis.global = globalThis;

export {
  OptionalPropertiesInput,
  EditionMetadataOutputSchema,
  EditionMetadataWithOwnerOutputSchema,
  EditionMetadataInputSchema,
  EditionMetadataInputOrUriSchema,
  TokenMintInputSchema,
  ProposalState,
  getCachedAbiForContract
};
//# sourceMappingURL=chunk-ZBKAIHRP.js.map
