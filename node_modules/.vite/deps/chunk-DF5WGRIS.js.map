{
  "version": 3,
  "sources": ["../../@thirdweb-dev/wallets/evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.browser.esm.js", "../../@thirdweb-dev/wallets/dist/base-901ad5ac.browser.esm.js", "../../@thirdweb-dev/wallets/evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js", "../../@thirdweb-dev/wallets/evm/wallets/device-wallet/dist/thirdweb-dev-wallets-evm-wallets-device-wallet.browser.esm.js", "../../@thirdweb-dev/wallets/evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.browser.esm.js", "../../@thirdweb-dev/wallets/evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.browser.esm.js", "../../@thirdweb-dev/wallets/dist/thirdweb-dev-wallets.browser.esm.js", "../../@thirdweb-dev/wallets/dist/CredentialsStorage-9a5b0621.browser.esm.js", "../../@thirdweb-dev/wallets/evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.browser.esm.js", "../../@thirdweb-dev/wallets/evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.browser.esm.js", "../../@thirdweb-dev/wallets/evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.browser.esm.js", "../../@thirdweb-dev/wallets/evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.browser.esm.js"],
  "sourcesContent": ["import { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { a as AbstractClientWallet } from '../../../../dist/base-901ad5ac.browser.esm.js';\nimport '../../../../dist/classPrivateMethodGet-9d546189.browser.esm.js';\nimport '../../../../dist/checkPrivateRedeclaration-3aaaa21d.browser.esm.js';\nimport '../../abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport 'ethers';\nimport 'eventemitter3';\nimport '@thirdweb-dev/chains';\n\nclass PaperWallet extends AbstractClientWallet {\n  get walletName() {\n    return \"Paper Wallet\";\n  }\n  constructor(options) {\n    super(PaperWallet.id, {\n      ...options\n    });\n    _defineProperty(this, \"connector\", void 0);\n    _defineProperty(this, \"clientId\", void 0);\n    _defineProperty(this, \"chain\", void 0);\n    this.clientId = options.clientId;\n    this.chain = options.chain;\n    this.chains = options.chains;\n  }\n  async getConnector() {\n    if (!this.connector) {\n      const {\n        PaperWalletConnector\n      } = await import('../../../connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.browser.esm.js');\n      this.connector = new PaperWalletConnector({\n        clientId: this.clientId,\n        chain: this.chain,\n        chains: this.chains\n      });\n    }\n    return this.connector;\n  }\n  async updateChains(chains) {\n    this.chains = chains;\n  }\n  async getEmail() {\n    const connector = await this.getConnector();\n    return connector.getEmail();\n  }\n}\n_defineProperty(PaperWallet, \"id\", \"PaperWallet\");\n_defineProperty(PaperWallet, \"meta\", {\n  name: \"Paper Wallet\",\n  iconURL: \"ipfs://QmNrLXtPoFrh4yjZbXui39zUMozS1oetpgU8dvZhFAxfRa/paper-logo-icon.svg\"\n});\n\nexport { PaperWallet };\n", "import { _ as _classPrivateMethodInitSpec, a as _classPrivateMethodGet } from './classPrivateMethodGet-9d546189.browser.esm.js';\nimport { _ as _defineProperty } from './defineProperty-c8ecdc07.browser.esm.js';\nimport { AbstractWallet } from '../evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport { defaultChains } from '@thirdweb-dev/chains';\n\nconst PREFIX = \"__TW__\";\nclass AsyncLocalStorage {\n  constructor(name) {\n    _defineProperty(this, \"name\", void 0);\n    this.name = name;\n  }\n  getItem(key) {\n    return new Promise(res => {\n      res(localStorage.getItem(`${PREFIX}/${this.name}/${key}`));\n    });\n  }\n  setItem(key, value) {\n    return new Promise((res, rej) => {\n      try {\n        localStorage.setItem(`${PREFIX}/${this.name}/${key}`, value);\n        res();\n      } catch (e) {\n        rej(e);\n      }\n    });\n  }\n  removeItem(key) {\n    return new Promise(res => {\n      localStorage.removeItem(`${PREFIX}/${this.name}/${key}`);\n      res();\n    });\n  }\n}\nfunction createAsyncLocalStorage(name) {\n  return new AsyncLocalStorage(name);\n}\n\nconst DEFAULT_DAPP_META = {\n  name: \"thirdweb powered dApp\",\n  url: \"https://thirdweb.com\",\n  description: \"thirdweb powered dApp\",\n  logoUrl: \"https://thirdweb.com/favicon.ico\",\n  isDarkMode: true\n};\n\nvar _connect = /*#__PURE__*/new WeakSet();\nvar _subscribeToEvents = /*#__PURE__*/new WeakSet();\nclass AbstractClientWallet extends AbstractWallet {\n  getMeta() {\n    return this.constructor.meta;\n  }\n  constructor(walletId, options) {\n    super();\n    _classPrivateMethodInitSpec(this, _subscribeToEvents);\n    _classPrivateMethodInitSpec(this, _connect);\n    _defineProperty(this, \"walletId\", void 0);\n    _defineProperty(this, \"walletStorage\", void 0);\n    _defineProperty(this, \"chains\", void 0);\n    _defineProperty(this, \"dappMetadata\", void 0);\n    _defineProperty(this, \"options\", void 0);\n    this.walletId = walletId;\n    this.options = options;\n    this.chains = options?.chains || defaultChains;\n    this.dappMetadata = options?.dappMetadata || DEFAULT_DAPP_META;\n    this.walletStorage = options?.walletStorage || createAsyncLocalStorage(this.walletId);\n  }\n  /**\n   * tries to auto connect to the wallet\n   */\n  async autoConnect(connectOptions) {\n    // remove chainId when autoconnecting to prevent switch-network popup on page load\n    const options = connectOptions ? {\n      ...connectOptions,\n      chainId: undefined\n    } : undefined;\n    return _classPrivateMethodGet(this, _connect, _connect2).call(this, true, options);\n  }\n\n  /**\n   * connect to the wallet\n   */\n  async connect(connectOptions) {\n    const address = await _classPrivateMethodGet(this, _connect, _connect2).call(this, false, connectOptions);\n    if (!address) {\n      throw new Error(\"Failed to connect to the wallet.\");\n    }\n    return address;\n  }\n  async getSigner() {\n    const connector = await this.getConnector();\n    if (!connector) {\n      throw new Error(\"Wallet not connected\");\n    }\n    return await connector.getSigner();\n  }\n  async disconnect() {\n    const connector = await this.getConnector();\n    if (connector) {\n      await connector.disconnect();\n      this.emit(\"disconnect\");\n      connector.removeAllListeners();\n    }\n  }\n  async switchChain(chainId) {\n    const connector = await this.getConnector();\n    if (!connector) {\n      throw new Error(\"Wallet not connected\");\n    }\n    if (!connector.switchChain) {\n      throw new Error(\"Wallet does not support switching chains\");\n    }\n    return await connector.switchChain(chainId);\n  }\n  async updateChains(chains) {\n    this.chains = chains;\n    const connector = await this.getConnector();\n    connector.updateChains(chains);\n  }\n}\nasync function _connect2(isAutoConnect, connectOptions) {\n  const connector = await this.getConnector();\n  _classPrivateMethodGet(this, _subscribeToEvents, _subscribeToEvents2).call(this, connector);\n  const isConnected = await connector.isConnected();\n\n  // if already connected, return the address and setup listeners\n  if (isConnected) {\n    const address = await connector.getAddress();\n    connector.setupListeners();\n\n    // ensure that connector is connected to the correct chain\n    if (connectOptions?.chainId) {\n      await connector.switchChain(connectOptions?.chainId);\n    }\n    this.emit(\"connect\", {\n      address,\n      chainId: await this.getChainId()\n    });\n    return address;\n  }\n  if (isAutoConnect) {\n    throw new Error(\"Failed to auto connect to the wallet.\");\n  }\n  const address = await connector.connect(connectOptions);\n  return address;\n}\nasync function _subscribeToEvents2(connector) {\n  // subscribe to connector for events\n  connector.on(\"connect\", data => {\n    this.emit(\"connect\", {\n      address: data.account,\n      chainId: data.chain?.id\n    });\n  });\n  connector.on(\"change\", data => {\n    this.emit(\"change\", {\n      address: data.account,\n      chainId: data.chain?.id\n    });\n  });\n  connector.on(\"message\", data => {\n    this.emit(\"message\", data);\n  });\n  connector.on(\"disconnect\", async () => {\n    this.emit(\"disconnect\");\n  });\n  connector.on(\"error\", error => this.emit(\"error\", error));\n}\n_defineProperty(AbstractClientWallet, \"meta\", void 0);\n\nexport { AsyncLocalStorage as A, DEFAULT_DAPP_META as D, AbstractClientWallet as a, createAsyncLocalStorage as c };\n", "import { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { providers, Contract, utils } from 'ethers';\nimport EventEmitter from 'eventemitter3';\n\n// TODO improve this\nfunction chainIdToThirdwebRpc(chainId) {\n  return `https://${chainId}.rpc.thirdweb.com`;\n}\nconst EIP1271_ABI = [\"function isValidSignature(bytes32 _message, bytes _signature) public view returns (bytes4)\"];\nconst EIP1271_MAGICVALUE = \"0x1626ba7e\";\nasync function checkContractWalletSignature(message, signature, address, chainId) {\n  const provider = new providers.JsonRpcProvider(chainIdToThirdwebRpc(chainId));\n  const walletContract = new Contract(address, EIP1271_ABI, provider);\n  const _hashMessage = utils.hashMessage(message);\n  try {\n    const res = await walletContract.isValidSignature(_hashMessage, signature);\n    return res === EIP1271_MAGICVALUE;\n  } catch {\n    return false;\n  }\n}\nclass AbstractWallet extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"type\", \"evm\");\n    _defineProperty(this, \"signerPromise\", void 0);\n  }\n  /**\n   * @returns the account address from connected wallet\n   */\n  async getAddress() {\n    const signer = await this.getCachedSigner();\n    return signer.getAddress();\n  }\n\n  /**\n   * @returns the chain id from connected wallet\n   */\n  async getChainId() {\n    const signer = await this.getCachedSigner();\n    return signer.getChainId();\n  }\n\n  /**\n   * @returns the signature of the message\n   */\n  async signMessage(message) {\n    const signer = await this.getCachedSigner();\n    return await signer.signMessage(message);\n  }\n\n  /**\n   * verify the signature of a message\n   * @returns `true` if the signature is valid, `false` otherwise\n   */\n  async verifySignature(message, signature, address, chainId) {\n    const messageHash = utils.hashMessage(message);\n    const messageHashBytes = utils.arrayify(messageHash);\n    const recoveredAddress = utils.recoverAddress(messageHashBytes, signature);\n    if (recoveredAddress === address) {\n      return true;\n    }\n\n    // Check if the address is a smart contract wallet\n    if (chainId !== undefined) {\n      try {\n        const isValid = await checkContractWalletSignature(message, signature, address, chainId || 1);\n        return isValid;\n      } catch {\n        // no-op\n      }\n    }\n    return false;\n  }\n  async getCachedSigner() {\n    // if we already have a signer promise, return that\n    if (this.signerPromise) {\n      return this.signerPromise;\n    }\n    this.signerPromise = this.getSigner().catch(() => {\n      this.signerPromise = undefined;\n      throw new Error(\"Unable to get a signer!\");\n    });\n    return this.signerPromise;\n  }\n}\n\nexport { AbstractWallet, checkContractWalletSignature };\n", "import { _ as _classPrivateMethodInitSpec, a as _classPrivateMethodGet } from '../../../../dist/classPrivateMethodGet-9d546189.browser.esm.js';\nimport { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-eea39a9a.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { a as AbstractClientWallet, c as createAsyncLocalStorage } from '../../../../dist/base-901ad5ac.browser.esm.js';\nimport { Ethereum, defaultChains } from '@thirdweb-dev/chains';\nimport { Wallet, utils } from 'ethers';\nimport '../../../../dist/checkPrivateRedeclaration-3aaaa21d.browser.esm.js';\nimport '../../abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport 'eventemitter3';\n\nconst STORAGE_KEY_WALLET_DATA = \"deviceWalletData\";\nvar _ethersWallet = /*#__PURE__*/new WeakMap();\nvar _storage2 = /*#__PURE__*/new WeakMap();\nvar _saveData = /*#__PURE__*/new WeakSet();\nclass DeviceWallet extends AbstractClientWallet {\n  get walletName() {\n    return \"Device Wallet\";\n  }\n  constructor(options) {\n    super(DeviceWallet.id, options);\n    /**\n     * store the wallet data to storage\n     */\n    _classPrivateMethodInitSpec(this, _saveData);\n    _defineProperty(this, \"connector\", void 0);\n    _defineProperty(this, \"options\", void 0);\n    _classPrivateFieldInitSpec(this, _ethersWallet, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _storage2, {\n      writable: true,\n      value: void 0\n    });\n    this.options = options || {};\n    _classPrivateFieldSet(this, _storage2, options?.storage || createAsyncLocalStorage(\"deviceWallet\"));\n  }\n  async getConnector() {\n    if (!this.connector) {\n      const {\n        DeviceWalletConnector\n      } = await import('../../../connectors/device-wallet/dist/thirdweb-dev-wallets-evm-connectors-device-wallet.browser.esm.js');\n      if (!_classPrivateFieldGet(this, _ethersWallet)) {\n        throw new Error(\"wallet is not initialized\");\n      }\n      this.connector = new DeviceWalletConnector({\n        chain: this.options.chain || Ethereum,\n        ethersWallet: _classPrivateFieldGet(this, _ethersWallet),\n        chains: this.options.chains || defaultChains\n      });\n    }\n    return this.connector;\n  }\n\n  /**\n   * creates a new random wallet\n   * @returns the address of the newly created wallet\n   */\n  async generate() {\n    if (_classPrivateFieldGet(this, _ethersWallet)) {\n      throw new Error(\"wallet is already initialized\");\n    }\n    _classPrivateFieldSet(this, _ethersWallet, Wallet.createRandom());\n    return _classPrivateFieldGet(this, _ethersWallet).address;\n  }\n\n  /**\n   * create device wallet from an \"encryptedJson\", \"privateKey\" or \"mnemonic\"\n   * @returns\n   */\n  async import(options) {\n    if (_classPrivateFieldGet(this, _ethersWallet)) {\n      throw new Error(\"wallet is already initialized\");\n    }\n    if (\"encryptedJson\" in options) {\n      _classPrivateFieldSet(this, _ethersWallet, await Wallet.fromEncryptedJson(options.encryptedJson, options.password));\n      return _classPrivateFieldGet(this, _ethersWallet).address;\n    }\n    if (\"privateKey\" in options) {\n      if (!options.encryption && !isValidPrivateKey(options.privateKey)) {\n        throw new Error(\"invalid private key\");\n      }\n      const privateKey = await getDecryptor(options.encryption)(options.privateKey);\n      if (options.encryption && (privateKey === \"\" || !isValidPrivateKey(privateKey))) {\n        throw new Error(\"invalid password\");\n      }\n      _classPrivateFieldSet(this, _ethersWallet, new Wallet(privateKey));\n      return _classPrivateFieldGet(this, _ethersWallet).address;\n    }\n    if (\"mnemonic\" in options) {\n      if (!options.encryption && !utils.isValidMnemonic(options.mnemonic)) {\n        throw new Error(\"invalid mnemonic\");\n      }\n      const mnemonic = await getDecryptor(options.encryption)(options.mnemonic);\n      if (options.encryption && (mnemonic === \"\" || !utils.isValidMnemonic(mnemonic))) {\n        throw new Error(\"invalid password\");\n      }\n      _classPrivateFieldSet(this, _ethersWallet, Wallet.fromMnemonic(mnemonic));\n      return _classPrivateFieldGet(this, _ethersWallet).address;\n    }\n    throw new Error(\"invalid import strategy\");\n  }\n\n  /**\n   * initialize the wallet from saved data on storage\n   * @param password - password used for encrypting the wallet\n   */\n  async load(options) {\n    if (_classPrivateFieldGet(this, _ethersWallet)) {\n      throw new Error(\"wallet is already initialized\");\n    }\n    const walletData = await this.getSavedData(options.storage);\n    if (!walletData) {\n      throw new Error(\"No Saved wallet found in storage\");\n    }\n\n    // strategy mismatch\n    if (walletData.strategy !== options.strategy) {\n      throw new Error(`Saved wallet data is not ${options.strategy}, it is ${walletData.strategy}`);\n    }\n    if (options.strategy === \"encryptedJson\") {\n      return this.import({\n        encryptedJson: walletData.data,\n        password: options.password\n      });\n    }\n\n    // encryption mismatch\n    if (walletData.isEncrypted && !options.encryption) {\n      throw new Error(\"Saved wallet data is encrypted, but no password is provided\");\n    }\n    if (!walletData.isEncrypted && options.encryption) {\n      throw new Error(\"Saved wallet data is not encrypted, but encryption config is provided\");\n    }\n    if (options.strategy === \"privateKey\") {\n      return this.import({\n        privateKey: walletData.data,\n        encryption: options.encryption\n      });\n    }\n    if (options.strategy === \"mnemonic\") {\n      return this.import({\n        mnemonic: walletData.data,\n        encryption: options.encryption\n      });\n    }\n    throw new Error(\"invalid load strategy\");\n  }\n\n  /**\n   * Save the wallet data to storage\n   */\n  async save(options) {\n    const wallet = _classPrivateFieldGet(this, _ethersWallet);\n    if (!wallet) {\n      throw new Error(\"Wallet is not initialized\");\n    }\n    if (options.strategy === \"encryptedJson\") {\n      const encryptedData = await wallet.encrypt(options.password, {\n        scrypt: {\n          N: 1 << 32\n        }\n      });\n      await _classPrivateMethodGet(this, _saveData, _saveData2).call(this, {\n        address: wallet.address,\n        data: encryptedData,\n        strategy: \"encryptedJson\",\n        isEncrypted: true\n      }, options.storage);\n    }\n    if (options.strategy === \"privateKey\") {\n      const privateKey = await getEncryptor(options.encryption)(wallet.privateKey);\n      await _classPrivateMethodGet(this, _saveData, _saveData2).call(this, {\n        address: wallet.address,\n        data: privateKey,\n        strategy: \"privateKey\",\n        isEncrypted: !!options.encryption\n      }, options.storage);\n    }\n    if (options.strategy === \"mnemonic\") {\n      const mnemonic = await getEncryptor(options.encryption)(wallet.mnemonic.phrase);\n      await _classPrivateMethodGet(this, _saveData, _saveData2).call(this, {\n        address: wallet.address,\n        data: mnemonic,\n        strategy: \"mnemonic\",\n        isEncrypted: !!options.encryption\n      }, options.storage);\n    }\n  }\n\n  /**\n   * @returns true if wallet data is saved in storage\n   */\n  async isSaved() {\n    const data = await this.getSavedData();\n    return !!data;\n  }\n\n  /**\n   * deletes the saved wallet data from storage\n   */\n  async deleteSaved() {\n    await _classPrivateFieldGet(this, _storage2).removeItem(STORAGE_KEY_WALLET_DATA);\n  }\n\n  /**\n   * encrypts the wallet with given password and returns the encrypted wallet\n   * @param password - password for encrypting the wallet data\n   */\n  async export(options) {\n    const wallet = _classPrivateFieldGet(this, _ethersWallet);\n    if (!wallet) {\n      throw new Error(\"Wallet is not initialized\");\n    }\n    if (options.strategy === \"encryptedJson\") {\n      return wallet.encrypt(options.password, {\n        scrypt: {\n          N: 1 << 32\n        }\n      });\n    }\n    if (options.strategy === \"privateKey\") {\n      return getEncryptor(options.encryption)(wallet.privateKey);\n    }\n    if (options.strategy === \"mnemonic\") {\n      if (!wallet.mnemonic) {\n        throw new Error(\"mnemonic can not be computed if wallet is created from a private key\");\n      }\n      return getEncryptor(options.encryption)(wallet.mnemonic.phrase);\n    }\n    throw new Error(\"Invalid export strategy\");\n  }\n\n  /**\n   * Get the saved wallet data from storage\n   */\n  async getSavedData(storage) {\n    const _storage = storage || _classPrivateFieldGet(this, _storage2);\n    const savedDataStr = await _storage.getItem(STORAGE_KEY_WALLET_DATA);\n    if (!savedDataStr) {\n      return null;\n    }\n    try {\n      const savedData = JSON.parse(savedDataStr);\n      if (!savedData) {\n        return null;\n      }\n      return savedData;\n    } catch (e) {\n      return null;\n    }\n  }\n}\nasync function _saveData2(data, storage) {\n  const _storage = storage || _classPrivateFieldGet(this, _storage2);\n  await _storage.setItem(STORAGE_KEY_WALLET_DATA, JSON.stringify(data));\n}\n_defineProperty(DeviceWallet, \"id\", \"deviceWallet\");\n_defineProperty(DeviceWallet, \"meta\", {\n  name: \"Device Wallet\",\n  iconURL: \"ipfs://QmcNddbYBuQKiBFnPcxYegjrX6S6z9K1vBNzbBBUJMn2ox/device-wallet.svg\"\n});\nasync function defaultEncrypt(message, password) {\n  const cryptoJS = (await import('crypto-js')).default;\n  return cryptoJS.AES.encrypt(message, password).toString();\n}\nasync function defaultDecrypt(message, password) {\n  const cryptoJS = (await import('crypto-js')).default;\n  return cryptoJS.AES.decrypt(message, password).toString(cryptoJS.enc.Utf8);\n}\n\n/**\n * if encryption object is provided\n *  - return the encryption.decrypt function if given, else return the default decrypt function\n * if encryption object is not provided\n * - return a noop function\n * @returns\n */\nfunction getDecryptor(encryption) {\n  const noop = async msg => msg;\n  return encryption ? msg => (encryption.decrypt || defaultDecrypt)(msg, encryption.password) : noop;\n}\n\n/**\n * if encryption object is provided\n *  - return the encryption.encrypt function if given, else return the default encrypt function\n * if encryption object is not provided\n * - return a noop function\n * @returns\n */\nfunction getEncryptor(encryption) {\n  const noop = async msg => msg;\n  return encryption ? msg => (encryption.encrypt || defaultEncrypt)(msg, encryption.password) : noop;\n}\nfunction isValidPrivateKey(value) {\n  return value.match(/^(0x)?[0-9a-f]{64}$/i);\n}\n\nexport { DeviceWallet };\n", "import { _ as _classPrivateMethodInitSpec, a as _classPrivateMethodGet } from '../../../../dist/classPrivateMethodGet-9d546189.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-eea39a9a.browser.esm.js';\nimport { W as WagmiAdapter } from '../../../../dist/tw-connector-443c384d.browser.esm.js';\nimport { a as AbstractClientWallet } from '../../../../dist/base-901ad5ac.browser.esm.js';\nimport '../../../../dist/checkPrivateRedeclaration-3aaaa21d.browser.esm.js';\nimport 'eventemitter3';\nimport '../../abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport 'ethers';\nimport '@thirdweb-dev/chains';\n\nconst TW_WC_PROJECT_ID = \"145769e410f16970a79ff77b2d89a1e0\";\n\nvar _walletConnectConnector = /*#__PURE__*/new WeakMap();\nvar _provider = /*#__PURE__*/new WeakMap();\nvar _maybeThrowError = /*#__PURE__*/new WeakMap();\nvar _onConnect = /*#__PURE__*/new WeakMap();\nvar _onDisconnect = /*#__PURE__*/new WeakMap();\nvar _onChange = /*#__PURE__*/new WeakMap();\nvar _onMessage = /*#__PURE__*/new WeakMap();\nvar _onSessionRequestSent = /*#__PURE__*/new WeakMap();\nvar _setupListeners = /*#__PURE__*/new WeakSet();\nvar _removeListeners = /*#__PURE__*/new WeakSet();\nclass WalletConnect extends AbstractClientWallet {\n  get walletName() {\n    return \"WalletConnect\";\n  }\n  constructor(options) {\n    super(options?.walletId || WalletConnect.id, options);\n    _classPrivateMethodInitSpec(this, _removeListeners);\n    _classPrivateMethodInitSpec(this, _setupListeners);\n    _classPrivateFieldInitSpec(this, _walletConnectConnector, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"connector\", void 0);\n    _defineProperty(this, \"projectId\", void 0);\n    _defineProperty(this, \"qrcode\", void 0);\n    _classPrivateFieldInitSpec(this, _maybeThrowError, {\n      writable: true,\n      value: error => {\n        if (error) {\n          throw error;\n        }\n      }\n    });\n    _classPrivateFieldInitSpec(this, _onConnect, {\n      writable: true,\n      value: data => {\n        _classPrivateFieldSet(this, _provider, data.provider);\n        if (!_classPrivateFieldGet(this, _provider)) {\n          throw new Error(\"WalletConnect provider not found after connecting.\");\n        }\n      }\n    });\n    _classPrivateFieldInitSpec(this, _onDisconnect, {\n      writable: true,\n      value: () => {\n        _classPrivateMethodGet(this, _removeListeners, _removeListeners2).call(this);\n      }\n    });\n    _classPrivateFieldInitSpec(this, _onChange, {\n      writable: true,\n      value: async payload => {\n        if (payload.chain) ; else if (payload.account) ;\n      }\n    });\n    _classPrivateFieldInitSpec(this, _onMessage, {\n      writable: true,\n      value: payload => {\n        switch (payload.type) {\n          case \"display_uri\":\n            this.emit(\"open_wallet\", payload.data);\n            break;\n        }\n      }\n    });\n    _classPrivateFieldInitSpec(this, _onSessionRequestSent, {\n      writable: true,\n      value: () => {\n        // open wallet after request is sent\n        this.emit(\"open_wallet\");\n      }\n    });\n    this.projectId = options?.projectId || TW_WC_PROJECT_ID;\n    this.qrcode = options?.qrcode === false ? false : true;\n  }\n  async getConnector() {\n    if (!this.connector) {\n      // import the connector dynamically\n      const {\n        WalletConnectConnector\n      } = await import('../../../connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js');\n      _classPrivateFieldSet(this, _walletConnectConnector, new WalletConnectConnector({\n        chains: this.chains,\n        options: {\n          qrcode: this.qrcode,\n          projectId: this.projectId,\n          dappMetadata: this.dappMetadata,\n          storage: this.walletStorage\n        }\n      }));\n      this.connector = new WagmiAdapter(_classPrivateFieldGet(this, _walletConnectConnector));\n      _classPrivateFieldSet(this, _provider, await _classPrivateFieldGet(this, _walletConnectConnector).getProvider());\n      _classPrivateMethodGet(this, _setupListeners, _setupListeners2).call(this);\n    }\n    return this.connector;\n  }\n}\nfunction _setupListeners2() {\n  if (!_classPrivateFieldGet(this, _walletConnectConnector)) {\n    return;\n  }\n  _classPrivateMethodGet(this, _removeListeners, _removeListeners2).call(this);\n  _classPrivateFieldGet(this, _walletConnectConnector).on(\"connect\", _classPrivateFieldGet(this, _onConnect));\n  _classPrivateFieldGet(this, _walletConnectConnector).on(\"disconnect\", _classPrivateFieldGet(this, _onDisconnect));\n  _classPrivateFieldGet(this, _walletConnectConnector).on(\"change\", _classPrivateFieldGet(this, _onChange));\n  _classPrivateFieldGet(this, _walletConnectConnector).on(\"message\", _classPrivateFieldGet(this, _onMessage));\n  _classPrivateFieldGet(this, _provider)?.signer.client.on(\"session_request_sent\", _classPrivateFieldGet(this, _onSessionRequestSent));\n}\nfunction _removeListeners2() {\n  if (!_classPrivateFieldGet(this, _walletConnectConnector)) {\n    return;\n  }\n  _classPrivateFieldGet(this, _walletConnectConnector).removeListener(\"connect\", _classPrivateFieldGet(this, _onConnect));\n  _classPrivateFieldGet(this, _walletConnectConnector).removeListener(\"disconnect\", _classPrivateFieldGet(this, _onDisconnect));\n  _classPrivateFieldGet(this, _walletConnectConnector).removeListener(\"change\", _classPrivateFieldGet(this, _onChange));\n  _classPrivateFieldGet(this, _walletConnectConnector).removeListener(\"message\", _classPrivateFieldGet(this, _onMessage));\n  _classPrivateFieldGet(this, _provider)?.signer.client.removeListener(\"session_request_sent\", _classPrivateFieldGet(this, _onSessionRequestSent));\n}\n_defineProperty(WalletConnect, \"id\", \"walletConnect\");\n_defineProperty(WalletConnect, \"meta\", {\n  name: \"WalletConnect\",\n  iconURL: \"ipfs://QmX58KPRaTC9JYZ7KriuBzeoEaV2P9eZcA3qbFnTHZazKw/wallet-connect.svg\"\n});\n\nexport { WalletConnect };\n", "import { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { a as AbstractClientWallet } from '../../../../dist/base-901ad5ac.browser.esm.js';\nexport { SafeSupportedChainsSet } from '../../../connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.browser.esm.js';\nimport '../../../../dist/classPrivateMethodGet-9d546189.browser.esm.js';\nimport '../../../../dist/checkPrivateRedeclaration-3aaaa21d.browser.esm.js';\nimport '../../abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport 'ethers';\nimport 'eventemitter3';\nimport '@thirdweb-dev/chains';\nimport '../../../../dist/tw-connector-443c384d.browser.esm.js';\nimport '@safe-global/safe-ethers-adapters';\nimport '@safe-global/safe-core-sdk';\nimport '@safe-global/safe-ethers-lib';\n\n// re-export the connection args for convenience\n\nclass SafeWallet extends AbstractClientWallet {\n  get walletName() {\n    return \"Safe Wallet\";\n  }\n  constructor(options) {\n    super(SafeWallet.id, {\n      ...options\n    });\n    _defineProperty(this, \"connector\", void 0);\n  }\n  async getConnector() {\n    if (!this.connector) {\n      const {\n        SafeConnector\n      } = await import('../../../connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.browser.esm.js');\n      this.connector = new SafeConnector();\n    }\n    return this.connector;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async updateChains(chains) {\n    // no op\n  }\n  async connect(connectOptions) {\n    // can't save params to storage because one of them is a class instance and can't be saved\n    return await super.connect({\n      ...connectOptions,\n      saveParams: false\n    });\n  }\n  getPersonalWallet() {\n    return this.connector?.personalWallet;\n  }\n}\n_defineProperty(SafeWallet, \"meta\", {\n  name: \"Safe\",\n  iconURL: \"ipfs://QmbbyxDDmmLQh8DzzeUR6X6B75bESsNUFmbdvS3ZsQ2pN1/SafeToken.svg\"\n});\n_defineProperty(SafeWallet, \"id\", \"Safe\");\n\nexport { SafeWallet };\n", "export { a as AbstractClientWallet, A as AsyncLocalStorage, D as DEFAULT_DAPP_META, c as createAsyncLocalStorage } from './base-901ad5ac.browser.esm.js';\nexport { C as CredentialsStorage } from './CredentialsStorage-9a5b0621.browser.esm.js';\nexport { A as AddChainError, a as ChainNotConfiguredError, C as Connector, P as ProviderRpcError, S as SwitchChainError, U as UserRejectedRequestError } from './errors-e1a2656b.browser.esm.js';\nexport { n as normalizeChainId } from './normalizeChainId-e4cc0175.browser.esm.js';\nexport { T as TWConnector, W as WagmiAdapter } from './tw-connector-443c384d.browser.esm.js';\nexport { a as assertWindowEthereum } from './assertWindowEthereum-66ccef46.browser.esm.js';\nexport { PaperWallet } from '../evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.browser.esm.js';\nexport { CoinbaseWallet } from '../evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.browser.esm.js';\nexport { DeviceWallet } from '../evm/wallets/device-wallet/dist/thirdweb-dev-wallets-evm-wallets-device-wallet.browser.esm.js';\nexport { InjectedWallet } from '../evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.browser.esm.js';\nexport { MetaMaskWallet } from '../evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.browser.esm.js';\nexport { WalletConnect } from '../evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.browser.esm.js';\nexport { WalletConnectV1 } from '../evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.browser.esm.js';\nexport { SafeSupportedChainsSet } from '../evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.browser.esm.js';\nexport { SafeWallet } from '../evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.browser.esm.js';\nimport './classPrivateMethodGet-9d546189.browser.esm.js';\nimport './checkPrivateRedeclaration-3aaaa21d.browser.esm.js';\nimport './defineProperty-c8ecdc07.browser.esm.js';\nimport '../evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport 'ethers';\nimport 'eventemitter3';\nimport '@thirdweb-dev/chains';\nimport 'buffer';\nimport './classPrivateFieldSet-eea39a9a.browser.esm.js';\nimport '@safe-global/safe-ethers-adapters';\nimport '@safe-global/safe-core-sdk';\nimport '@safe-global/safe-ethers-lib';\n", "class CredentialsStorage {\n  async getItem() {\n    const credential = await navigator.credentials.get({\n      password: true,\n      unmediated: true\n    });\n    if (credential && \"password\" in credential) {\n      return credential.password;\n    }\n    return null;\n  }\n  async setItem(_key, value) {\n    const {\n      address\n    } = JSON.parse(value);\n    const credentialData = {\n      id: address,\n      password: value\n    };\n    const credential = await navigator.credentials.create({\n      password: credentialData\n    });\n    if (!credential) {\n      throw new Error(\"Credential not created\");\n    }\n    await navigator.credentials.store(credential);\n  }\n  async removeItem() {\n    // Question: is there any way to remove a credential?\n    const credential = await navigator.credentials.get({\n      password: true,\n      unmediated: true\n    });\n    if (credential) {\n      await navigator.credentials.preventSilentAccess();\n    }\n  }\n}\n\nexport { CredentialsStorage as C };\n", "import { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { W as WagmiAdapter } from '../../../../dist/tw-connector-443c384d.browser.esm.js';\nimport { a as AbstractClientWallet } from '../../../../dist/base-901ad5ac.browser.esm.js';\nimport { Buffer } from 'buffer';\nimport 'eventemitter3';\nimport '../../../../dist/classPrivateMethodGet-9d546189.browser.esm.js';\nimport '../../../../dist/checkPrivateRedeclaration-3aaaa21d.browser.esm.js';\nimport '../../abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport 'ethers';\nimport '@thirdweb-dev/chains';\n\n{\n  // Coinbase SDK uses Buffer for rendering the QRCode which requires a global polyfill\n  window.Buffer = Buffer;\n}\nclass CoinbaseWallet extends AbstractClientWallet {\n  get walletName() {\n    return \"Coinbase Wallet\";\n  }\n  constructor(options) {\n    super(CoinbaseWallet.id, options);\n    _defineProperty(this, \"connector\", void 0);\n    _defineProperty(this, \"coinbaseConnector\", void 0);\n    _defineProperty(this, \"headlessMode\", void 0);\n    this.headlessMode = options?.headlessMode || false;\n  }\n  async getConnector() {\n    if (!this.connector) {\n      // import the connector dynamically\n      const {\n        CoinbaseWalletConnector\n      } = await import('../../../connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.browser.esm.js');\n      const cbConnector = new CoinbaseWalletConnector({\n        chains: this.chains,\n        options: {\n          appName: this.dappMetadata.name,\n          reloadOnDisconnect: false,\n          darkMode: this.dappMetadata.isDarkMode,\n          headlessMode: this.headlessMode\n        }\n      });\n      cbConnector.on(\"connect\", () => {});\n      this.coinbaseConnector = cbConnector;\n      this.connector = new WagmiAdapter(cbConnector);\n    }\n    return this.connector;\n  }\n  async getQrUrl() {\n    await this.getConnector();\n    if (!this.coinbaseConnector) {\n      throw new Error(\"Coinbase connector not initialized\");\n    }\n    return this.coinbaseConnector.getQrUrl();\n  }\n}\n_defineProperty(CoinbaseWallet, \"meta\", {\n  iconURL: \"ipfs://QmcJBHopbwfJcLqJpX2xEufSS84aLbF7bHavYhaXUcrLaH/coinbase.svg\",\n  name: \"Coinbase Wallet\"\n});\n_defineProperty(CoinbaseWallet, \"id\", \"coinbaseWallet\");\n\nexport { CoinbaseWallet };\n", "import { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { W as WagmiAdapter } from '../../../../dist/tw-connector-443c384d.browser.esm.js';\nimport { a as AbstractClientWallet } from '../../../../dist/base-901ad5ac.browser.esm.js';\nimport 'eventemitter3';\nimport '../../../../dist/classPrivateMethodGet-9d546189.browser.esm.js';\nimport '../../../../dist/checkPrivateRedeclaration-3aaaa21d.browser.esm.js';\nimport '../../abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport 'ethers';\nimport '@thirdweb-dev/chains';\n\nclass InjectedWallet extends AbstractClientWallet {\n  get walletName() {\n    return \"Injected Wallet\";\n  }\n  constructor(options) {\n    super(InjectedWallet.id, options);\n    _defineProperty(this, \"connector\", void 0);\n  }\n  async getConnector() {\n    if (!this.connector) {\n      // import the connector dynamically\n      const {\n        InjectedConnector\n      } = await import('../../../connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js');\n      this.connector = new WagmiAdapter(new InjectedConnector({\n        chains: this.chains,\n        connectorStorage: this.walletStorage,\n        options: {\n          shimDisconnect: true\n        }\n      }));\n    }\n    return this.connector;\n  }\n}\n_defineProperty(InjectedWallet, \"id\", \"injected\");\n\nexport { InjectedWallet };\n", "import { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { W as WagmiAdapter } from '../../../../dist/tw-connector-443c384d.browser.esm.js';\nimport { a as assertWindowEthereum } from '../../../../dist/assertWindowEthereum-66ccef46.browser.esm.js';\nimport { a as AbstractClientWallet } from '../../../../dist/base-901ad5ac.browser.esm.js';\nimport 'eventemitter3';\nimport '../../../../dist/classPrivateMethodGet-9d546189.browser.esm.js';\nimport '../../../../dist/checkPrivateRedeclaration-3aaaa21d.browser.esm.js';\nimport '../../abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport 'ethers';\nimport '@thirdweb-dev/chains';\n\nclass MetaMaskWallet extends AbstractClientWallet {\n  get walletName() {\n    return \"MetaMask\";\n  }\n  constructor(options) {\n    super(MetaMaskWallet.id, options);\n    _defineProperty(this, \"connector\", void 0);\n    _defineProperty(this, \"walletConnectConnector\", void 0);\n    _defineProperty(this, \"metamaskConnector\", void 0);\n    _defineProperty(this, \"isInjected\", void 0);\n    if (assertWindowEthereum(globalThis.window)) {\n      this.isInjected = !!globalThis.window.ethereum?.isMetaMask;\n    } else {\n      this.isInjected = false;\n    }\n  }\n  async getConnector() {\n    if (!this.connector) {\n      // if metamask is injected, use the injected connector\n      // otherwise, use the wallet connect connector for using the metamask app on mobile via QR code scan\n\n      if (this.isInjected) {\n        // import the connector dynamically\n        const {\n          MetaMaskConnector\n        } = await import('../../../connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.browser.esm.js');\n        const metamaskConnector = new MetaMaskConnector({\n          chains: this.chains,\n          connectorStorage: this.walletStorage,\n          options: {\n            shimDisconnect: true\n          }\n        });\n        this.metamaskConnector = metamaskConnector;\n        this.connector = new WagmiAdapter(metamaskConnector);\n      } else {\n        const {\n          WalletConnectV1Connector\n        } = await import('../../../connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.browser.esm.js');\n        const walletConnectConnector = new WalletConnectV1Connector({\n          chains: this.chains,\n          storage: this.walletStorage,\n          options: {\n            clientMeta: {\n              name: this.dappMetadata.name,\n              description: this.dappMetadata.description || \"\",\n              url: this.dappMetadata.url,\n              icons: [this.dappMetadata.logoUrl || \"\"]\n            },\n            qrcode: this.options?.qrcode\n          }\n        });\n\n        // need to save this for getting the QR code URI\n        this.walletConnectConnector = walletConnectConnector;\n        this.connector = new WagmiAdapter(walletConnectConnector);\n      }\n    }\n    return this.connector;\n  }\n\n  /**\n   * connect to wallet with QR code\n   *\n   * @example\n   * ```typescript\n   * metamask.connectWithQrCode({\n   *  chainId: 1,\n   *  onQrCodeUri(qrCodeUri) {\n   *    // render the QR code with `qrCodeUri`\n   *  },\n   *  onConnected(accountAddress)  {\n   *    // update UI to show connected state\n   *  },\n   * })\n   * ```\n   */\n  async connectWithQrCode(options) {\n    await this.getConnector();\n    const wcConnector = this.walletConnectConnector;\n    if (!wcConnector) {\n      throw new Error(\"WalletConnect connector not found\");\n    }\n    const wcProvider = await wcConnector.getProvider();\n\n    // set a listener for display_uri event\n    wcProvider.connector.on(\"display_uri\", (error, payload) => {\n      options.onQrCodeUri(payload.params[0]);\n    });\n\n    // trigger the display_uri event to get the QR code\n    await wcProvider.enable();\n    // connected to app here\n\n    // trigger connect flow\n    this.connect({\n      chainId: options.chainId\n    }).then(options.onConnected);\n  }\n  async switchAccount() {\n    if (!this.metamaskConnector) {\n      throw new Error(\"Can not switch Account\");\n    }\n    await this.metamaskConnector.switchAccount();\n  }\n}\n_defineProperty(MetaMaskWallet, \"meta\", {\n  name: \"MetaMask\",\n  iconURL: \"ipfs://QmZZHcw7zcXursywnLDAyY6Hfxzqop5GKgwoq8NB9jjrkN/metamask.svg\"\n});\n_defineProperty(MetaMaskWallet, \"id\", \"metamask\");\n\nexport { MetaMaskWallet };\n", "import { _ as _classPrivateMethodInitSpec, a as _classPrivateMethodGet } from '../../../../dist/classPrivateMethodGet-9d546189.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { b as _classPrivateFieldGet, _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet } from '../../../../dist/classPrivateFieldSet-eea39a9a.browser.esm.js';\nimport { W as WagmiAdapter } from '../../../../dist/tw-connector-443c384d.browser.esm.js';\nimport { a as AbstractClientWallet } from '../../../../dist/base-901ad5ac.browser.esm.js';\nimport '../../../../dist/checkPrivateRedeclaration-3aaaa21d.browser.esm.js';\nimport 'eventemitter3';\nimport '../../abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport 'ethers';\nimport '@thirdweb-dev/chains';\n\nvar _walletConnectConnector = /*#__PURE__*/new WeakMap();\nvar _provider = /*#__PURE__*/new WeakMap();\nvar _onConnect = /*#__PURE__*/new WeakMap();\nvar _onDisconnect = /*#__PURE__*/new WeakMap();\nvar _onChange = /*#__PURE__*/new WeakMap();\nvar _onMessage = /*#__PURE__*/new WeakMap();\nvar _setupListeners = /*#__PURE__*/new WeakSet();\nvar _removeListeners = /*#__PURE__*/new WeakSet();\nclass WalletConnectV1 extends AbstractClientWallet {\n  get walletName() {\n    return _classPrivateFieldGet(this, _walletConnectConnector)?.walletName || \"WalletConnect\";\n  }\n  constructor(options) {\n    super(options?.walletId || WalletConnectV1.id, options);\n    _classPrivateMethodInitSpec(this, _removeListeners);\n    _classPrivateMethodInitSpec(this, _setupListeners);\n    _classPrivateFieldInitSpec(this, _walletConnectConnector, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"connector\", void 0);\n    _defineProperty(this, \"qrcode\", void 0);\n    _classPrivateFieldInitSpec(this, _onConnect, {\n      writable: true,\n      value: data => {\n        _classPrivateFieldSet(this, _provider, data.provider);\n        if (!_classPrivateFieldGet(this, _provider)) {\n          throw new Error(\"WalletConnect provider not found after connecting.\");\n        }\n      }\n    });\n    _classPrivateFieldInitSpec(this, _onDisconnect, {\n      writable: true,\n      value: () => {\n        _classPrivateMethodGet(this, _removeListeners, _removeListeners2).call(this);\n      }\n    });\n    _classPrivateFieldInitSpec(this, _onChange, {\n      writable: true,\n      value: async payload => {\n        if (payload.chain) ; else if (payload.account) ;\n      }\n    });\n    _classPrivateFieldInitSpec(this, _onMessage, {\n      writable: true,\n      value: payload => {\n        switch (payload.type) {\n          case \"request\": // open wallet after request is sent\n          case \"add_chain\": // open wallet after chain is added\n          case \"switch_chain\":\n            // open wallet after chain is switched\n            this.emit(\"open_wallet\");\n            break;\n          case \"display_uri\":\n            this.emit(\"open_wallet\", payload.data);\n            break;\n        }\n      }\n    });\n    this.qrcode = options?.qrcode === false ? false : true;\n  }\n  async getConnector() {\n    if (!this.connector) {\n      // import the connector dynamically\n      const {\n        WalletConnectV1Connector\n      } = await import('../../../connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.browser.esm.js');\n      _classPrivateFieldSet(this, _walletConnectConnector, new WalletConnectV1Connector({\n        chains: this.chains,\n        storage: this.walletStorage,\n        options: {\n          qrcode: this.qrcode,\n          clientMeta: {\n            description: this.dappMetadata.description || \"\",\n            url: this.dappMetadata.url,\n            icons: [this.dappMetadata.logoUrl || \"\"],\n            name: this.dappMetadata.name\n          }\n        }\n      }));\n      this.connector = new WagmiAdapter(_classPrivateFieldGet(this, _walletConnectConnector));\n      _classPrivateFieldSet(this, _provider, await _classPrivateFieldGet(this, _walletConnectConnector).getProvider());\n      _classPrivateMethodGet(this, _setupListeners, _setupListeners2).call(this);\n    }\n    return this.connector;\n  }\n}\nfunction _setupListeners2() {\n  if (!_classPrivateFieldGet(this, _walletConnectConnector)) {\n    return;\n  }\n  _classPrivateFieldGet(this, _walletConnectConnector).on(\"connect\", _classPrivateFieldGet(this, _onConnect));\n  _classPrivateFieldGet(this, _walletConnectConnector).on(\"disconnect\", _classPrivateFieldGet(this, _onDisconnect));\n  _classPrivateFieldGet(this, _walletConnectConnector).on(\"change\", _classPrivateFieldGet(this, _onChange));\n  _classPrivateFieldGet(this, _walletConnectConnector).on(\"message\", _classPrivateFieldGet(this, _onMessage));\n}\nfunction _removeListeners2() {\n  if (!_classPrivateFieldGet(this, _walletConnectConnector)) {\n    return;\n  }\n  _classPrivateFieldGet(this, _walletConnectConnector).removeListener(\"connect\", _classPrivateFieldGet(this, _onConnect));\n  _classPrivateFieldGet(this, _walletConnectConnector).removeListener(\"disconnect\", _classPrivateFieldGet(this, _onDisconnect));\n  _classPrivateFieldGet(this, _walletConnectConnector).removeListener(\"change\", _classPrivateFieldGet(this, _onChange));\n  _classPrivateFieldGet(this, _walletConnectConnector).removeListener(\"message\", _classPrivateFieldGet(this, _onMessage));\n}\n_defineProperty(WalletConnectV1, \"id\", \"walletConnectV1\");\n_defineProperty(WalletConnectV1, \"meta\", {\n  name: \"WalletConnect\",\n  iconURL: \"ipfs://QmX58KPRaTC9JYZ7KriuBzeoEaV2P9eZcA3qbFnTHZazKw/wallet-connect.svg\"\n});\n\nexport { WalletConnectV1 };\n"],
  "mappings": "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",
  "names": ["address", "_walletConnectConnector", "_provider", "_onConnect", "_onDisconnect", "_onChange", "_onMessage", "_setupListeners", "_removeListeners", "_removeListeners2", "_setupListeners2", "import_buffer", "import_safe_ethers_adapters", "import_safe_core_sdk", "import_safe_ethers_lib"]
}
